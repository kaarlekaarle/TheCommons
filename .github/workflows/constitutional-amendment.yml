name: Constitutional Amendment Validation

on:
  pull_request:
    paths: 
      - 'constitutional/**'
      - 'docs/constitutional/**'
      - 'backend/scripts/constitutional_amendment_validator.py'
      - 'backend/scripts/constitutional_amendment_log.py'
      - 'backend/scripts/constitutional_principle_matrix.py'
      - 'backend/scripts/constitutional_feasibility_validator.py'
      - 'backend/scripts/constitutional_dependency_validator.py'
      - 'backend/scripts/constitutional_drift_detector.py'
      - 'backend/scripts/constitutional_cascade_detector.py'
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      cascade_smoke:
        description: 'Run cascade smoke tests'
        required: false
        default: false
        type: boolean

jobs:
  amendment-validation:
    name: Constitutional Amendment Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch full history for git diff
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install networkx requests
    
    - name: Super-Delegate Pattern Detection
      run: |
        echo "üö® SUPER-DELEGATE PATTERN DETECTION"
        echo "==================================="
        echo ""
        echo "Scanning for super-delegate patterns in delegation code..."
        echo ""
        
        # Run super-delegate detection
        python backend/scripts/constitutional_principle_matrix.py --detect-super-delegates --git-changes
        
        # Check exit code
        if [ $? -eq 0 ]; then
          echo ""
          echo "‚úÖ No super-delegate patterns detected!"
          echo "Anti-hierarchy principle maintained."
        else
          echo ""
          echo "‚ùå SUPER-DELEGATE PATTERNS DETECTED!"
          echo "===================================="
          echo ""
          echo "CRITICAL: Super-delegate patterns violate the anti-hierarchy principle!"
          echo ""
          echo "The Delegation Constitution prohibits:"
          echo "‚Ä¢ Super-delegate patterns"
          echo "‚Ä¢ Multiple override authority"
          echo "‚Ä¢ Power concentration"
          echo "‚Ä¢ Hierarchy in delegation flows"
          echo ""
          echo "üîí AMENDMENT BLOCKED - SUPER-DELEGATE PATTERN DETECTED üîí"
          echo ""
          echo "Required actions:"
          echo "1. Remove super-delegate patterns"
          echo "2. Ensure no node has >1 direct override authority"
          echo "3. Maintain flat, distributed delegation structure"
          echo "4. Resubmit amendment"
          exit 1
        fi
    
    - name: Override Latency Performance Test
      run: |
        echo "‚ö° OVERRIDE LATENCY PERFORMANCE TEST"
        echo "===================================="
        echo ""
        echo "Testing delegation override latency..."
        echo ""
        
        # Run override latency test
        python backend/scripts/constitutional_drift_detector.py --test-override-latency
        
        # Check exit code
        if [ $? -eq 0 ]; then
          echo ""
          echo "‚úÖ Override latency within constitutional limits!"
          echo "User intent supremacy maintained."
        else
          echo ""
          echo "‚ùå OVERRIDE LATENCY EXCEEDS CONSTITUTIONAL LIMITS!"
          echo "=================================================="
          echo ""
          echo "CRITICAL: Override latency >2.0s violates user intent supremacy!"
          echo ""
          echo "The Delegation Constitution requires:"
          echo "‚Ä¢ Override latency ‚â§2.0 seconds"
          echo "‚Ä¢ User intent always wins instantly"
          echo "‚Ä¢ No delegate can override user decisions"
          echo "‚Ä¢ Immediate user control"
          echo ""
          echo "üîí AMENDMENT BLOCKED - OVERRIDE LATENCY VIOLATION DETECTED üîí"
          echo ""
          echo "Required actions:"
          echo "1. Optimize delegation override performance"
          echo "2. Reduce override latency to ‚â§2.0 seconds"
          echo "3. Ensure user intent supremacy"
          echo "4. Resubmit amendment"
          exit 1
        fi
    
    - name: Constitutional Amendment Validation
      run: |
        echo "üèõÔ∏è CONSTITUTIONAL AMENDMENT VALIDATION"
        echo "======================================"
        echo ""
        echo "Running amendment validation on changed files..."
        echo ""
        
        # Run the amendment validator
        python backend/scripts/constitutional_amendment_validator.py --git-changes --output amendment_results.json
        
        # Check exit code
        if [ $? -eq 0 ]; then
          echo ""
          echo "‚úÖ Amendment validation passed!"
          echo "Constitutional changes are valid and ready for review."
        elif [ $? -eq 2 ]; then
          echo ""
          echo "‚ö†Ô∏è  Amendment validation has warnings!"
          echo "Constitutional changes have warnings that should be reviewed."
          echo "Proceeding with caution..."
        else
          echo ""
          echo "‚ùå Amendment validation failed!"
          echo "Constitutional changes must pass validation before merging."
          echo ""
          echo "Please review the validation results and address any issues."
          exit 1
        fi
    
    - name: Philosophical Integrity Check
      run: |
        echo "üèõÔ∏è PHILOSOPHICAL INTEGRITY VALIDATION"
        echo "====================================="
        echo ""
        
        if [ -f amendment_results.json ]; then
          # Check if philosophical integrity check was run
          PHI_STATUS=$(python -c "import json; data=json.load(open('amendment_results.json')); print(data['validation_results']['checks']['philosophical_integrity']['status'])")
          
          if [ "$PHI_STATUS" = "fail" ]; then
            echo "‚ùå PHILOSOPHICAL INTEGRITY CHECK FAILED"
            echo "======================================"
            echo ""
            echo "CRITICAL: Core constitutional principles have been violated!"
            echo ""
            echo "This amendment cannot proceed. Core principles are:"
            echo "‚Ä¢ Power Must Circulate - delegations must be revocable"
            echo "‚Ä¢ User Intent Supremacy - user intent always wins"
            echo "‚Ä¢ Radical Transparency - all flows must be visible"
            echo "‚Ä¢ Anti-Hierarchy - no power concentration"
            echo ""
            echo "The Delegation Constitution is ABSOLUTE."
            echo "No exceptions, no bypasses, no compromises."
            echo ""
            echo "üîí AMENDMENT BLOCKED - CONSTITUTIONAL VIOLATION DETECTED üîí"
            exit 1
          elif [ "$PHI_STATUS" = "warning" ]; then
            echo "‚ö†Ô∏è  PHILOSOPHICAL INTEGRITY CHECK HAS WARNINGS"
            echo "============================================="
            echo ""
            echo "WARNING: Some constitutional principles may be affected."
            echo "Review the warnings and consider addressing them."
            echo ""
            echo "Proceeding with caution..."
          else
            echo "‚úÖ PHILOSOPHICAL INTEGRITY CHECK PASSED"
            echo "======================================"
            echo ""
            echo "All core constitutional principles are maintained."
            echo "Amendment may proceed to next stage."
          fi
        else
          echo "‚ö†Ô∏è  No amendment results found"
          echo "Philosophical integrity check may not have completed."
          exit 1
        fi
    
    - name: Technical Feasibility Check
      run: |
        echo "üîß TECHNICAL FEASIBILITY VALIDATION"
        echo "==================================="
        echo ""
        
        if [ -f amendment_results.json ]; then
          # Check if technical feasibility check was run
          FEAS_STATUS=$(python -c "import json; data=json.load(open('amendment_results.json')); print(data['validation_results']['checks']['technical_feasibility']['status'])")
          
          if [ "$FEAS_STATUS" = "fail" ]; then
            echo "‚ùå TECHNICAL FEASIBILITY CHECK FAILED"
            echo "===================================="
            echo ""
            echo "CRITICAL: Amendment is technically infeasible!"
            echo ""
            echo "This amendment cannot proceed due to technical constraints:"
            echo "‚Ä¢ Infinite resource requirements"
            echo "‚Ä¢ Impossible performance demands"
            echo "‚Ä¢ Unsupported technology requirements"
            echo "‚Ä¢ Non-existent architecture components"
            echo ""
            echo "The system architecture is CONSTRAINED."
            echo "No impossible demands, no infinite resources, no unsupported technologies."
            echo ""
            echo "üîí AMENDMENT BLOCKED - TECHNICAL INFEASIBILITY DETECTED üîí"
            exit 1
          elif [ "$FEAS_STATUS" = "warning" ]; then
            echo "‚ö†Ô∏è  TECHNICAL FEASIBILITY CHECK HAS WARNINGS"
            echo "==========================================="
            echo ""
            echo "WARNING: Amendment has technical complexity warnings."
            echo "Review the warnings and consider implementation challenges."
            echo ""
            echo "Proceeding with caution..."
          else
            echo "‚úÖ TECHNICAL FEASIBILITY CHECK PASSED"
            echo "===================================="
            echo ""
            echo "Amendment is technically feasible."
            echo "Implementation challenges are manageable."
          fi
        else
          echo "‚ö†Ô∏è  No amendment results found"
          echo "Technical feasibility check may not have completed."
          exit 1
        fi
    
    - name: Dependency & Community Impact Check
      run: |
        echo "üîó DEPENDENCY & COMMUNITY IMPACT VALIDATION"
        echo "=========================================="
        echo ""
        
        if [ -f amendment_results.json ]; then
          # Check if dependency impact check was run
          DEP_STATUS=$(python -c "import json; data=json.load(open('amendment_results.json')); print(data['validation_results']['checks']['dependency_impact']['status'])")
          
          if [ "$DEP_STATUS" = "fail" ]; then
            echo "‚ùå DEPENDENCY & COMMUNITY IMPACT CHECK FAILED"
            echo "==========================================="
            echo ""
            echo "CRITICAL: Amendment has unsustainable dependencies or high community impact!"
            echo ""
            echo "This amendment cannot proceed due to:"
            echo "‚Ä¢ Dependency breaks or circular dependencies"
            echo "‚Ä¢ High community maintenance burden"
            echo "‚Ä¢ Breaking changes affecting existing functionality"
            echo "‚Ä¢ Unsustainable complexity for the community"
            echo ""
            echo "The community sustainability is PROTECTED."
            echo "No dependency breaks, no unsustainable burdens, no breaking changes."
            echo ""
            echo "üîí AMENDMENT BLOCKED - DEPENDENCY/COMMUNITY IMPACT DETECTED üîí"
            exit 1
          elif [ "$DEP_STATUS" = "warning" ]; then
            echo "‚ö†Ô∏è  DEPENDENCY & COMMUNITY IMPACT CHECK HAS WARNINGS"
            echo "=================================================="
            echo ""
            echo "WARNING: Amendment has dependency or community impact warnings."
            echo "Review the warnings and consider community sustainability."
            echo ""
            echo "Proceeding with caution..."
          else
            echo "‚úÖ DEPENDENCY & COMMUNITY IMPACT CHECK PASSED"
            echo "==========================================="
            echo ""
            echo "Dependencies are sustainable."
            echo "Community impact is manageable."
          fi
        else
          echo "‚ö†Ô∏è  No amendment results found"
          echo "Dependency impact check may not have completed."
          exit 1
        fi
    
    - name: Delegation Concentration Monitoring
      run: |
        echo "üìä DELEGATION CONCENTRATION MONITORING"
        echo "====================================="
        echo ""
        echo "Monitoring delegation API complexity and maintainer concentration..."
        echo ""
        
        if [ -f amendment_results.json ]; then
          # Check delegation complexity
          COMPLEXITY_STATUS=$(python -c "import json; data=json.load(open('amendment_results.json')); print(data['validation_results']['checks'].get('delegation_complexity', {}).get('status', 'unknown'))")
          
          if [ "$COMPLEXITY_STATUS" = "warning" ]; then
            echo "‚ö†Ô∏è  DELEGATION COMPLEXITY WARNING"
            echo "================================"
            echo ""
            echo "WARNING: High delegation API complexity detected!"
            echo ""
            echo "This may indicate:"
            echo "‚Ä¢ Too many active delegation flows per module"
            echo "‚Ä¢ Increased maintainer spread risk"
            echo "‚Ä¢ Potential complexity ceiling exceeded"
            echo ""
            echo "Consider:"
            echo "‚Ä¢ Simplifying delegation flows"
            echo "‚Ä¢ Reducing module complexity"
            echo "‚Ä¢ Distributing maintainer responsibility"
            echo ""
            echo "‚ö†Ô∏è  MONITORING WARNING - NOT BLOCKING ‚ö†Ô∏è"
            echo "Proceeding with caution..."
          else
            echo "‚úÖ Delegation complexity within acceptable limits"
          fi
          
          # Check maintainer concentration
          CONCENTRATION_STATUS=$(python -c "import json; data=json.load(open('amendment_results.json')); print(data['validation_results']['checks'].get('maintainer_concentration', {}).get('status', 'unknown'))"
          
          if [ "$CONCENTRATION_STATUS" = "warning" ]; then
            echo "‚ö†Ô∏è  MAINTAINER CONCENTRATION WARNING"
            echo "==================================="
            echo ""
            echo "WARNING: High maintainer concentration detected!"
            echo ""
            echo "This may indicate:"
            echo "‚Ä¢ Single maintainer handling most delegation commits"
            echo "‚Ä¢ Risk of knowledge silo formation"
            echo "‚Ä¢ Potential bottleneck in delegation development"
            echo ""
            echo "Consider:"
            echo "‚Ä¢ Encouraging more contributors"
            echo "‚Ä¢ Knowledge sharing and documentation"
            echo "‚Ä¢ Pair programming and code reviews"
            echo ""
            echo "‚ö†Ô∏è  MONITORING WARNING - NOT BLOCKING ‚ö†Ô∏è"
            echo "Proceeding with caution..."
          else
            echo "‚úÖ Maintainer concentration within acceptable limits"
          fi
        else
          echo "‚ö†Ô∏è  No amendment results found"
          echo "Delegation concentration monitoring may not have completed."
        fi
    
    - name: Cascade Detector (shadow/warn/enforce)
      run: |
        # Export branch information for cascade detector
        export GITHUB_REF_NAME="${{ github.ref_name }}"
        export GITHUB_REF="${{ github.ref }}"
        
        echo ""
        echo "üåø BRANCH: $GITHUB_REF_NAME"
        echo "================================="
        echo ""
        
        python3 backend/scripts/constitutional_cascade_detector.py \
          --mode "${{ env.CASCADE_MODE || 'warn' }}" \
          --json-out reports/constitutional_cascade.json
      continue-on-error: ${{ env.CASCADE_MODE == 'shadow' || env.CASCADE_MODE == 'warn' }}

    - name: Collect Override Latency SLOs
      if: always()
      run: |
        echo ""
        echo "üìä COLLECTING OVERRIDE LATENCY SLOS"
        echo "==================================="
        echo ""
        
        # Collect real override latency metrics
        python3 backend/scripts/collect_override_latency.py \
          --output reports/override_latency_stats.json
        
        # Collect complexity data from dependency validator
        python3 backend/scripts/constitutional_dependency_validator.py \
          --emit-complexity-json --json-out reports/complexity_stats.json
        
        # Post SLO summary to logs
        if [ -f reports/override_latency_stats.json ]; then
          echo ""
          echo "üìà SLO SNAPSHOT"
          echo "==============="
          echo ""
          
          # Extract SLO metrics
          P50=$(jq -r '.statistics.p50 // 0' reports/override_latency_stats.json)
          P95=$(jq -r '.statistics.p95 // 0' reports/override_latency_stats.json)
          P99=$(jq -r '.statistics.p99 // 0' reports/override_latency_stats.json)
          COUNT=$(jq -r '.statistics.count // 0' reports/override_latency_stats.json)
          
          echo "Override Latency Metrics:"
          echo "  p50: ${P50}ms"
          echo "  p95: ${P95}ms (target: <1500ms)"
          echo "  p99: ${P99}ms (target: <2000ms)"
          echo "  samples: ${COUNT}"
          echo ""
          
          # Check SLO violations
          if (( $(echo "$P95 >= 1500" | bc -l) )); then
            echo "‚ö†Ô∏è  SLO VIOLATION: p95 override latency >= 1500ms"
          elif (( $(echo "$P95 >= 1200" | bc -l) )); then
            echo "üü° SLO WARNING: p95 override latency >= 1200ms"
          else
            echo "‚úÖ SLO OK: p95 override latency < 1200ms"
          fi
          
          if (( $(echo "$P99 >= 2000" | bc -l) )); then
            echo "‚ö†Ô∏è  SLO VIOLATION: p99 override latency >= 2000ms"
          elif (( $(echo "$P99 >= 1600" | bc -l) )); then
            echo "üü° SLO WARNING: p99 override latency >= 1600ms"
          else
            echo "‚úÖ SLO OK: p99 override latency < 1600ms"
          fi
        else
          echo "‚ö†Ô∏è  No override latency stats found"
          P50=0
          P95=0
          P99=0
        fi
        
        # Extract complexity data
        if [ -f reports/complexity_stats.json ]; then
          echo ""
          echo "Complexity Analysis:"
          
          # Get modules with >=7 flows
          HIGH_COMPLEXITY_MODULES=$(jq -r '.modules | to_entries[] | select(.value >= 7) | "\(.key) (\(.value) flows)"' reports/complexity_stats.json 2>/dev/null || echo "")
          
          if [ -n "$HIGH_COMPLEXITY_MODULES" ]; then
            echo "  Modules ‚â•7 flows:"
            echo "$HIGH_COMPLEXITY_MODULES" | while read -r module; do
              echo "    - $module"
            done
          else
            echo "  ‚úÖ No modules with ‚â•7 flows detected"
          fi
        else
          echo "  ‚ö†Ô∏è  No complexity stats found"
        fi
        
        echo ""
        echo "üìÑ SLO Documentation: docs/SLO_delegation_backend.md"
        echo "üìä Full reports: reports/override_latency_stats.json, reports/complexity_stats.json"
        
        # Create SLO snapshot for PR summary
        echo ""
        echo "## SLO Snapshot" >> $GITHUB_STEP_SUMMARY
        echo "**Override Latency**: p50=${P50}ms, p95=${P95}ms, p99=${P99}ms" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "$HIGH_COMPLEXITY_MODULES" ]; then
          echo "**Modules ‚â•7 flows**: " >> $GITHUB_STEP_SUMMARY
          echo "$HIGH_COMPLEXITY_MODULES" | while read -r module; do
            echo "- $module" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "**Modules ‚â•7 flows**: None" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "**SLO Targets**: p95 < 1500ms, p99 < 2000ms, ‚â§5 flows/module" >> $GITHUB_STEP_SUMMARY
        echo "**Documentation**: [SLO Guide](docs/SLO_delegation_backend.md)" >> $GITHUB_STEP_SUMMARY

    - name: Post Cascade Remediation Tips
      if: always()
      run: |
        echo ""
        echo "ü§ñ POSTING CASCADE REMEDIATION TIPS"
        echo "==================================="
        echo ""
        
        # Set PR number from GitHub context
        export PR_NUMBER="${{ github.event.pull_request.number }}"
        
        # Post cascade comment if Rule B or C is triggered
        python3 scripts/post_cascade_comment.py \
          --cascade-file reports/constitutional_cascade.json \
          --warnings-file reports/constitutional_warnings.json \
          --override-latency-file reports/override_latency_stats.json \
          --complexity-file reports/complexity_stats.json
        
        echo ""
        echo "‚úÖ Cascade remediation tips posted (if applicable)"

    - name: Upload Constitutional Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: constitutional-reports
        path: |
          reports/constitutional_cascade.json
          reports/constitutional_cascade.md
          reports/constitutional_warnings.json
          reports/override_latency_stats.json
          reports/complexity_stats.json
        retention-days: 30
    
    - name: Constitutional Cascade Summary
      run: |
        echo ""
        echo "üîç CONSTITUTIONAL CASCADE SUMMARY"
        echo "================================="
        echo ""
        
        if [ -f reports/constitutional_cascade.json ]; then
          CASCADE_SUMMARY=$(jq -r '.summary // "No summary available"' reports/constitutional_cascade.json)
          EXIT_CODE=$(jq -r '.exit_code // 0' reports/constitutional_cascade.json)
          
          echo "üìã $CASCADE_SUMMARY"
          echo ""
          
          if [ "$EXIT_CODE" = "10" ]; then
            echo "‚ùå CASCADE BLOCK DETECTED"
            echo "========================="
            echo ""
            echo "A cascade rule has been triggered that would block this PR in enforce mode."
            echo "Review the cascade report and address the underlying constitutional drift."
            echo ""
            echo "üìÑ Full report: reports/constitutional_cascade.md"
            echo "üìã Rules documentation: docs/cascade_rules.md"
            echo ""
          elif [ "$EXIT_CODE" = "8" ]; then
            echo "‚ö†Ô∏è  CASCADE WARNINGS DETECTED"
            echo "============================"
            echo ""
            echo "Cascade warnings detected. Review and consider addressing before enforce mode."
            echo ""
            echo "üìÑ Full report: reports/constitutional_cascade.md"
            echo "üìã Rules documentation: docs/cascade_rules.md"
            echo ""
          else
            echo "‚úÖ CASCADE CLEAN"
            echo "==============="
            echo ""
            echo "No cascade rules triggered. Constitutional drift is within acceptable limits."
            echo ""
          fi
        else
          echo "‚ö†Ô∏è  No cascade report found"
          echo "Cascade detection may not have completed."
        fi

    - name: Ingest Cascade to Warnings Ledger
      if: always()
      run: |
        echo ""
        echo "üì• INGESTING CASCADE TO WARNINGS LEDGER"
        echo "======================================="
        echo ""
        
        if [ -f reports/constitutional_cascade.json ]; then
          python3 backend/scripts/constitutional_warnings_ingest.py \
            --from-cascade reports/constitutional_cascade.json \
            --to reports/constitutional_warnings.json \
            --append
          
          echo ""
          echo "‚úÖ Cascade decisions ingested into warnings ledger"
          echo "üìä Unified constitutional signals available in reports/constitutional_warnings.json"
        else
          echo "‚ö†Ô∏è  No cascade report found - skipping ingestion"
        fi

    - name: Store Cascade Events in History
      if: always()
      run: |
        echo ""
        echo "üíæ STORING CASCADE EVENTS IN HISTORY"
        echo "===================================="
        echo ""
        
        if [ -f reports/constitutional_cascade.json ]; then
          python3 backend/scripts/constitutional_history.py \
            --store-cascade reports/constitutional_cascade.json
          
          echo ""
          echo "‚úÖ Cascade events stored in constitutional history database"
          echo "üìà 14-day sparkline will be populated for dashboard"
        else
          echo "‚ö†Ô∏è  No cascade report found - skipping history storage"
        fi

    - name: Promote to Fail Guard
      if: always()
      run: |
        echo ""
        echo "üîç PROMOTE TO FAIL GUARD"
        echo "========================"
        echo ""
        
        # Check if override label is present
        OVERRIDE_FLAG=""
        if [[ "${{ contains(github.event.pull_request.labels.*.name, 'constitutional-override') }}" == "true" ]]; then
          OVERRIDE_FLAG="--override"
          echo "üö® Constitutional override detected - red-flags will not fail build"
        fi
        
        # Run promote-to-fail check
        python3 scripts/promote_to_fail.py --warnings reports/constitutional_warnings.json $OVERRIDE_FLAG
        
        if [ $? -eq 20 ]; then
          echo ""
          echo "üîí BUILD FAILED - Constitutional red-flags detected"
          echo "See promote-to-fail output above for details"
          exit 1
        elif [ $? -eq 0 ] && [ -n "$OVERRIDE_FLAG" ]; then
          echo ""
          echo "‚ö†Ô∏è  Override used - 24-hour re-check required"
        fi

    - name: Emergency Override Check
      if: contains(github.event.pull_request.labels.*.name, 'constitutional-override')
      run: |
        echo ""
        echo "üö® EMERGENCY OVERRIDE DETECTED"
        echo "=============================="
        echo ""
        echo "PR has 'constitutional-override' label. Cascade blocks will not fail the build."
        echo ""
        echo "‚ö†Ô∏è  IMPORTANT: This override is for infrastructure emergencies only."
        echo "   - Deployment failures"
        echo "   - Security patches"
        echo "   - Critical bug fixes"
        echo ""
        echo "‚ùå NOT for:"
        echo "   - Feature requests"
        echo "   - Performance optimizations"
        echo "   - Convenience changes"
        echo ""
        echo "üìã Cascade Summary: $(jq -r '.summary // "No summary"' reports/constitutional_cascade.json)"
        echo ""
        echo "üîç A 24-hour re-check ticket will be created automatically."
        echo ""
        
        # Create override issue content
        cat > override_issue.md << EOF
        # Cascade Override - 24h Re-check Required
        
        **PR**: ${{ github.event.pull_request.html_url }}
        **Author**: ${{ github.event.pull_request.user.login }}
        **Override Reason**: ${{ github.event.pull_request.body }}
        
        **Cascade Summary**: $(jq -r '.summary // "No summary"' reports/constitutional_cascade.json)
        
        ## 24-Hour Re-check Checklist
        
        - [ ] Cascade conditions resolved
        - [ ] Constitutional drift addressed
        - [ ] Override label removed
        - [ ] Normal cascade checks passing
        
        **Due**: $(date -d '+24 hours' -u +"%Y-%m-%d %H:%M UTC")
        
        ---
        *This issue was auto-generated due to constitutional-override label.*
        EOF
        
        echo "üìÑ Override issue content prepared:"
        cat override_issue.md
    
    - name: Log Amendment Attempt
      if: always()
      run: |
        echo "üìù Logging amendment attempt..."
        
        # Extract amendment details from results
        if [ -f amendment_results.json ]; then
          AMENDMENT_ID=$(python -c "import json; data=json.load(open('amendment_results.json')); print(data.get('amendment_id', 'unknown'))")
          AMENDMENT_TYPE=$(python -c "import json; data=json.load(open('amendment_results.json')); print(data.get('amendment_type', 'unknown'))")
          STATUS=$(python -c "import json; data=json.load(open('amendment_results.json')); print(data['validation_results']['overall_status'])")
          
          # Log the amendment
          python backend/scripts/constitutional_amendment_log.py \
            --log \
            --id "$AMENDMENT_ID" \
            --type "$AMENDMENT_TYPE" \
            --status "$STATUS" \
            --title "PR Amendment" \
            --description "Constitutional amendment via pull request" \
            --author "github-pr"
        else
          echo "‚ö†Ô∏è  No amendment results found to log"
        fi
    
    - name: Upload Amendment Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: constitutional-amendment-results
        path: |
          amendment_results.json
          constitutional_amendment_log.db
        retention-days: 30
    
    - name: Amendment Gate Check
      run: |
        echo "üîí CONSTITUTIONAL AMENDMENT GATE"
        echo "================================"
        echo ""
        
        if [ -f amendment_results.json ]; then
          STATUS=$(python -c "import json; data=json.load(open('amendment_results.json')); print(data['validation_results']['overall_status'])")
          
          if [ "$STATUS" = "pass" ]; then
            echo "‚úÖ Amendment validation passed"
            echo "This constitutional change may proceed to review."
            echo ""
            echo "Next steps:"
            echo "1. Community review and discussion"
            echo "2. Philosophical review (if required)"
            echo "3. Technical validation"
            echo "4. Community ratification (if required)"
          elif [ "$STATUS" = "warning" ]; then
            echo "‚ö†Ô∏è  Amendment validation has warnings"
            echo "This constitutional change may proceed with caution."
            echo ""
            echo "Next steps:"
            echo "1. Review warnings and consider addressing them"
            echo "2. Community review and discussion"
            echo "3. Philosophical review (if required)"
            echo "4. Technical validation"
            echo "5. Community ratification (if required)"
          else
            echo "‚ùå Amendment validation failed"
            echo "This constitutional change cannot proceed."
            echo ""
            echo "Required actions:"
            echo "1. Review validation results"
            echo "2. Address validation failures"
            echo "3. Resubmit amendment"
            echo ""
            echo "The Delegation Constitution is protected."
            echo "No constitutional violations are permitted."
            exit 1
          fi
        else
          echo "‚ö†Ô∏è  No amendment results found"
          echo "Amendment validation may have failed to complete."
          exit 1
        fi

  cascade-smoke:
    name: Cascade Smoke Test
    runs-on: ubuntu-latest
    if: github.event.inputs.cascade_smoke == 'true'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install jq
    
    - name: Run Cascade Smoke Tests
      run: |
        echo "üöÄ RUNNING CASCADE SMOKE TESTS"
        echo "=============================="
        echo ""
        echo "Testing selective enforcement behavior:"
        echo "  - Rule B: Should BLOCK (enforce mode)"
        echo "  - Rule C: Should BLOCK (enforce mode)"
        echo "  - Rule A: Should WARN (warn mode)"
        echo "  - Rule D: Should WARN (warn mode)"
        echo ""
        
        chmod +x scripts/cascade_smoke.sh
        ./scripts/cascade_smoke.sh
        
        echo ""
        echo "‚úÖ All cascade smoke tests passed!"
        echo "Selective enforcement is working correctly."
    
    - name: Upload Smoke Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: cascade-smoke-results
        path: |
          reports/signal_*.json
          reports/constitutional_cascade.json
          reports/constitutional_cascade.md
        retention-days: 7
