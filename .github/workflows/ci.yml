name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pre-commit

    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files

    - name: Run backend tests (excluding unstable groups)
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        ENVIRONMENT: test
        DEBUG: "false"
      run: |
        # Run tests excluding known unstable groups
        pytest backend/tests/ -v --cov=backend --cov-report=xml --cov-fail-under=80 \
          -k "not offline and not delegation_edge" \
          --tb=short

    - name: Collect constitutional metrics
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        ENVIRONMENT: test
        DEBUG: "false"
      run: |
        # Collect override latency metrics
        python3 backend/scripts/collect_override_latency.py --json-out reports/override_latency.json
        
        # Collect complexity statistics
        python3 backend/scripts/constitutional_dependency_validator.py --emit-complexity-json reports/complexity_stats.json
        
        # Run cascade detector in warn mode
        python3 backend/scripts/constitutional_cascade_detector.py --mode warn --json-out reports/cascade_after_fix.json

    - name: Upload constitutional reports
      uses: actions/upload-artifact@v3
      with:
        name: constitutional-reports
        path: |
          reports/override_latency.json
          reports/complexity_stats.json
          reports/cascade_after_fix.json
          reports/cascade_after_fix.md
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  frontend-unit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend unit tests
      working-directory: frontend
      run: npm test -- --run

  frontend-smoke-e2e:
    runs-on: ubuntu-latest
    needs: [test]  # Wait for backend tests to pass
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps

    - name: Start backend server
      run: |
        # Start backend server in background for E2E tests
        cd backend
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10  # Wait for server to start

    - name: Run minimal smoke E2E tests
      working-directory: frontend
      run: |
        # Run only the smoke test
        npx playwright test smoke.spec.ts --config=e2e/playwright.config.ts

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security checks
      run: |
        bandit -r backend/ -c .bandit
        safety check --full-report

  docker:
    needs: [test, frontend-unit, frontend-smoke-e2e, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: kaarlekaarle
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          kaarlekaarle/the-commons:latest
          kaarlekaarle/the-commons:${{ github.sha }}
        cache-from: type=registry,ref=kaarlekaarle/the-commons:buildcache
        cache-to: type=registry,ref=kaarlekaarle/the-commons:buildcache,mode=max 